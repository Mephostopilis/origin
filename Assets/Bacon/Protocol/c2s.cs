// Generated by sprotodump. DO NOT EDIT!
// source: ..\..\..\mksproto\c2s.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace C2sSprotoType { 
	public class handshake {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class join {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _roomid; // tag 0
			public Int64 roomid {
				get { return _roomid; }
				set { base.has_field.set_field (0, true); _roomid = value; }
			}
			public bool HasRoomid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.roomid = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.roomid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 5;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private List<player> _players; // tag 1
			public List<player> players {
				get { return _players; }
				set { base.has_field.set_field (1, true); _players = value; }
			}
			public bool HasPlayers {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _session; // tag 2
			public Int64 session {
				get { return _session; }
				set { base.has_field.set_field (2, true); _session = value; }
			}
			public bool HasSession {
				get { return base.has_field.has_field (2); }
			}

			private string _host; // tag 3
			public string host {
				get { return _host; }
				set { base.has_field.set_field (3, true); _host = value; }
			}
			public bool HasHost {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _port; // tag 4
			public Int64 port {
				get { return _port; }
				set { base.has_field.set_field (4, true); _port = value; }
			}
			public bool HasPort {
				get { return base.has_field.has_field (4); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.players = base.deserialize.read_obj_list<player> ();
						break;
					case 2:
						this.session = base.deserialize.read_integer ();
						break;
					case 3:
						this.host = base.deserialize.read_string ();
						break;
					case 4:
						this.port = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.players, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.session, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_string (this.host, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.port, 4);
				}

				return base.serialize.close ();
			}
		}


	}


	public class match {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _mode; // tag 0
			public Int64 mode {
				get { return _mode; }
				set { base.has_field.set_field (0, true); _mode = value; }
			}
			public bool HasMode {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.mode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.mode, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _index; // tag 2
		public Int64 index {
			get { return _index; }
			set { base.has_field.set_field (2, true); _index = value; }
		}
		public bool HasIndex {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _version; // tag 3
		public Int64 version {
			get { return _version; }
			set { base.has_field.set_field (3, true); _version = value; }
		}
		public bool HasVersion {
			get { return base.has_field.has_field (3); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.index = base.deserialize.read_integer ();
					break;
				case 3:
					this.version = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.index, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.version, 3);
			}

			return base.serialize.close ();
		}
	}


	public class player : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _uid; // tag 0
		public Int64 uid {
			get { return _uid; }
			set { base.has_field.set_field (0, true); _uid = value; }
		}
		public bool HasUid {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _subid; // tag 1
		public Int64 subid {
			get { return _subid; }
			set { base.has_field.set_field (1, true); _subid = value; }
		}
		public bool HasSubid {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _session; // tag 2
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (2, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _idx; // tag 3
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (3, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (3); }
		}

		public player () : base(max_field_count) {}

		public player (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.uid = base.deserialize.read_integer ();
					break;
				case 1:
					this.subid = base.deserialize.read_integer ();
					break;
				case 2:
					this.session = base.deserialize.read_integer ();
					break;
				case 3:
					this.idx = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.uid, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.subid, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.session, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.idx, 3);
			}

			return base.serialize.close ();
		}
	}


}

